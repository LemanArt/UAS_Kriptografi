# -*- coding: utf-8 -*-
"""AffineOTP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oQN-6eSaDrbQpF1GGqUWQZzbOBKXaX8D
"""

import random

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def generate_keypair():
    # Pilih dua bilangan prima acak p dan q
    p = 17
    q = 19

    n = p * q
    phi = (p - 1) * (q - 1)

    # Pilih angka acak e yang relatif prima dengan phi
    e = random.randrange(1, phi)
    while gcd(e, phi) != 1:
        e = random.randrange(1, phi)

    # Hitung kunci privat d
    d = mod_inverse(e, phi)

    return ((n, e), (n, d))

def encrypt(text, public_key):
    n, e = public_key
    encrypted_text = [(ord(char) ** e) % n for char in text]
    return encrypted_text

def decrypt(encrypted_text, private_key):
    n, d = private_key
    decrypted_text = [chr((char ** d) % n) for char in encrypted_text]
    return ''.join(decrypted_text)

def generate_otp(length):
    return [random.randint(0, 255) for _ in range(length)]

def otp_xor(plaintext, otp):
    return [a ^ b for a, b in zip(plaintext, otp)]

def main():
    # Generate key pair
    public_key, private_key = generate_keypair()

    # Input teks yang akan dienkripsi
    plaintext = input("Masukkan teks yang akan dienkripsi: ")

    # Encrypt menggunakan Affine Cipher
    encrypted_text_affine = encrypt(plaintext, public_key)

    # Generate OTP
    otp = generate_otp(len(plaintext))

    # XOR Affine Cipher dengan OTP
    encrypted_text_otp = otp_xor(encrypted_text_affine, otp)

    print("Teks Enkripsi (Affine):", encrypted_text_affine)
    print("Kunci OTP:", otp)

    # Konversi setiap elemen dari int ke str sebelum menggabungkannya
    encrypted_text_otp_str = ''.join([str(char) for char in encrypted_text_otp])
    print("Teks Enkripsi (OTP):", encrypted_text_otp_str)

    # Decrypt menggunakan Affine Cipher
    decrypted_text_affine = decrypt(encrypted_text_affine, private_key)

    # XOR Affine Cipher yang telah dienkripsi dengan OTP yang sama
    decrypted_text_otp = otp_xor(encrypted_text_otp, otp)

    # Konversi setiap elemen dari int ke str sebelum menggabungkannya
    decrypted_text_otp_str = ''.join([str(char) for char in decrypted_text_otp])

    print("Teks Dekripsi (Affine):", decrypted_text_affine)
    print("Teks Dekripsi (OTP):", decrypted_text_otp_str)

if __name__ == "__main__":
    main()